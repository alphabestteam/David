1. Magic or Special methods in python are built in methods that start and end with 2 underscores.
    These functions can also be overloaded for more specific usage

    examples:
    __str__ -> for printing
    __init__ -> constructor
    __eq__ -> is like doing ==
    __add__ -> its like doing the + operator

2. If we were to print an object from a class without overloading the __str__ method,
    it will use the default __str__ method which will just return the objects address in a string.
    <__main__.Ob2 object at 0x01EC8490>

3. The __eq__ method is just like writing == in your code. If you were to use the default __eq__ method on 2 different objects
    it would try and see if they are the same address in the memory

4. Overloading is a way for us to change the functionality of built in methods like __str__.
    For example:
    class Obj1:
        def __init__(self):
            self._name = "david"

    class Obj2:
        def __init__(self):
            self._name = "david"

    a = Obj1()
    b = Obj2()

    print(a == b)

    It would print false because
    we are checking if the address of a is equal to the address of b. To make it work we need to overload the __eq__ method and alter whats inside.
    for example:
    def __eq__(self, other_object):
        return self._name == other_object._name

    Here we altered what the __eq__ method does and if we now try and check if they equal we will get True because it uses the __eq__ function that we overloaded





